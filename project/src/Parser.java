
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\032\005\000\002\002\004\000\002\030" +
    "\002\000\002\030\004\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\036\010\000" +
    "\002\040\002\000\002\040\003\000\002\041\005\000\002" +
    "\041\007\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\006\000\002\046\003\000\002" +
    "\046\003\000\002\045\010\000\002\037\006\000\002\034" +
    "\014\000\002\047\002\000\002\047\003\000\002\052\005" +
    "\000\002\052\007\000\002\051\002\000\002\051\004\000" +
    "\002\031\006\000\002\050\003\000\002\050\004\000\002" +
    "\053\004\000\002\055\010\000\002\054\003\000\002\054" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\056\005\000\002" +
    "\057\005\000\002\060\004\000\002\066\006\000\002\067" +
    "\002\000\002\067\003\000\002\070\003\000\002\070\005" +
    "\000\002\061\012\000\002\071\002\000\002\071\003\000" +
    "\002\072\004\000\002\062\011\000\002\063\013\000\002" +
    "\073\003\000\002\073\003\000\002\010\005\000\002\074" +
    "\002\000\002\074\003\000\002\075\005\000\002\075\007" +
    "\000\002\064\005\000\002\064\004\000\002\065\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\004\000\002" +
    "\026\004\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\005\000\002\026\003\000" +
    "\002\026\005\000\002\026\003\000\002\006\005\000\002" +
    "\076\006\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\005\000\002\077\005" +
    "\000\002\102\005\000\002\100\004\000\002\100\004\000" +
    "\002\100\006\000\002\103\007\000\002\103\006\000\002" +
    "\103\006\000\002\101\004\000\002\101\004\000\002\101" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\014\036\015\037\012\065\uffff\066\006\073" +
    "\014\001\002\000\016\002\ufffa\036\ufffa\037\ufffa\065\ufffa" +
    "\066\ufffa\073\ufffa\001\002\000\016\002\ufffb\036\ufffb\037" +
    "\ufffb\065\ufffb\066\ufffb\073\ufffb\001\002\000\022\052\232" +
    "\053\230\055\236\056\244\057\243\062\235\064\231\073" +
    "\241\001\002\000\016\002\uffff\036\015\037\012\065\uffff" +
    "\066\006\073\014\001\002\000\016\002\ufffd\036\ufffd\037" +
    "\ufffd\065\ufffd\066\ufffd\073\ufffd\001\002\000\004\002\346" +
    "\001\002\000\004\073\325\001\002\000\016\002\ufffc\036" +
    "\ufffc\037\ufffc\065\ufffc\066\ufffc\073\ufffc\001\002\000\004" +
    "\020\227\001\002\000\004\073\312\001\002\000\004\065" +
    "\020\001\002\000\014\002\uffff\036\015\037\012\066\006" +
    "\073\014\001\002\000\004\030\021\001\002\000\020\040" +
    "\027\041\032\042\022\043\045\044\036\067\026\073\033" +
    "\001\002\000\004\073\307\001\002\000\030\031\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\050\uffd1\067\uffd1\073\uffd1\001\002\000\030\031\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\050\uffd3\067\uffd3\073\uffd3\001\002\000\030\031\uffd9\040" +
    "\027\041\032\042\022\043\045\044\036\045\uffd9\046\uffd9" +
    "\050\uffd9\067\026\073\223\001\002\000\004\015\274\001" +
    "\002\000\004\015\266\001\002\000\004\073\014\001\002" +
    "\000\030\031\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\050\uffd2\067\uffd2\073\uffd2\001\002" +
    "\000\036\004\050\006\067\013\061\015\057\027\262\030" +
    "\060\052\071\053\052\054\062\055\066\056\063\057\053" +
    "\061\072\073\056\001\002\000\010\015\200\020\227\034" +
    "\225\001\002\000\020\040\027\041\032\042\022\043\045" +
    "\044\036\067\026\073\223\001\002\000\030\031\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\050\uffd6\067\uffd6\073\uffd6\001\002\000\004\015\211\001" +
    "\002\000\030\031\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\050\uffd7\067\uffd7\073\uffd7\001" +
    "\002\000\004\031\210\001\002\000\030\031\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050" +
    "\uffd5\067\uffd5\073\uffd5\001\002\000\004\027\207\001\002" +
    "\000\030\031\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\050\uffd4\067\uffd4\073\uffd4\001\002" +
    "\000\030\031\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\050\uffd0\067\uffd0\073\uffd0\001\002" +
    "\000\034\004\050\006\067\013\061\015\057\030\060\052" +
    "\071\053\052\054\062\055\066\056\063\057\053\061\072" +
    "\073\056\001\002\000\012\031\uffdd\045\uffdd\046\uffdd\050" +
    "\uffdd\001\002\000\100\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\031\uff9e\033\uff9e\035\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\067\uff9e" +
    "\073\uff9e\001\002\000\034\004\050\006\067\013\061\015" +
    "\057\030\060\052\071\053\052\054\062\055\066\056\063" +
    "\057\053\061\072\073\056\001\002\000\042\005\101\006" +
    "\076\007\105\010\107\011\104\012\111\017\113\021\102" +
    "\022\077\023\115\024\106\025\100\026\114\027\205\035" +
    "\112\051\103\001\002\000\100\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\014\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\031\uffa7\033\uffa7\035\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7" +
    "\067\uffa7\073\uffa7\001\002\000\100\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\031\uffa3\033\uffa3\035\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051" +
    "\uffa3\067\uffa3\073\uffa3\001\002\000\100\005\uffa0\006\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\014\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\031\uffa0\033\uffa0\035\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0" +
    "\051\uffa0\067\uffa0\073\uffa0\001\002\000\100\005\uff9c\006" +
    "\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\014\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\031\uff9c\033\uff9c\035\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050" +
    "\uff9c\051\uff9c\067\uff9c\073\uff9c\001\002\000\106\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\136\014" +
    "\uff98\015\200\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\031\uff98\032" +
    "\201\033\uff98\035\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\050\uff98\051\uff98\067\uff98\073" +
    "\uff98\001\002\000\034\004\050\006\067\013\061\015\057" +
    "\030\060\052\071\053\052\054\062\055\066\056\063\057" +
    "\053\061\072\073\056\001\002\000\036\004\050\006\067" +
    "\013\061\015\057\030\060\031\uffbe\052\071\053\052\054" +
    "\062\055\066\056\063\057\053\061\072\073\056\001\002" +
    "\000\036\004\050\006\067\013\061\014\uffcb\015\057\030" +
    "\060\052\071\053\052\054\062\055\066\056\063\057\053" +
    "\061\072\073\056\001\002\000\100\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\014\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\031\uffa4\033\uffa4\035\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4\051" +
    "\uffa4\067\uffa4\073\uffa4\001\002\000\100\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\014\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\031\uffa6\033\uffa6\035\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050\uffa6" +
    "\051\uffa6\067\uffa6\073\uffa6\001\002\000\100\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\014\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\031\uffa1\033\uffa1\035\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050" +
    "\uffa1\051\uffa1\067\uffa1\073\uffa1\001\002\000\104\005\uff99" +
    "\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\136\014" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\031\uff99\032\141\033" +
    "\uff99\035\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99" +
    "\045\uff99\046\uff99\050\uff99\051\uff99\067\uff99\073\uff99\001" +
    "\002\000\100\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\014\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\031\uffa2" +
    "\033\uffa2\035\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\067\uffa2\073\uffa2" +
    "\001\002\000\034\004\050\006\067\013\061\015\057\030" +
    "\060\052\071\053\052\054\062\055\066\056\063\057\053" +
    "\061\072\073\056\001\002\000\100\005\uff97\006\uff97\007" +
    "\uff97\010\uff97\011\uff97\012\uff97\014\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\031\uff97\033\uff97\035\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051" +
    "\uff97\067\uff97\073\uff97\001\002\000\100\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\014\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\031\uffa5\033\uffa5\035\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5" +
    "\051\uffa5\067\uffa5\073\uffa5\001\002\000\004\015\074\001" +
    "\002\000\100\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96" +
    "\012\uff96\014\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\031\uff96" +
    "\033\uff96\035\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\050\uff96\051\uff96\067\uff96\073\uff96" +
    "\001\002\000\034\004\050\006\067\013\061\015\057\030" +
    "\060\052\071\053\052\054\062\055\066\056\063\057\053" +
    "\061\072\073\056\001\002\000\042\005\101\006\076\007" +
    "\105\010\107\011\104\012\111\016\110\017\113\021\102" +
    "\022\077\023\115\024\106\025\100\026\114\035\112\051" +
    "\103\001\002\000\034\004\050\006\067\013\061\015\057" +
    "\030\060\052\071\053\052\054\062\055\066\056\063\057" +
    "\053\061\072\073\056\001\002\000\034\004\050\006\067" +
    "\013\061\015\057\030\060\052\071\053\052\054\062\055" +
    "\066\056\063\057\053\061\072\073\056\001\002\000\034" +
    "\004\050\006\067\013\061\015\057\030\060\052\071\053" +
    "\052\054\062\055\066\056\063\057\053\061\072\073\056" +
    "\001\002\000\034\004\050\006\067\013\061\015\057\030" +
    "\060\052\071\053\052\054\062\055\066\056\063\057\053" +
    "\061\072\073\056\001\002\000\034\004\050\006\067\013" +
    "\061\015\057\030\060\052\071\053\052\054\062\055\066" +
    "\056\063\057\053\061\072\073\056\001\002\000\034\004" +
    "\050\006\067\013\061\015\057\030\060\052\071\053\052" +
    "\054\062\055\066\056\063\057\053\061\072\073\056\001" +
    "\002\000\034\004\050\006\067\013\061\015\057\030\060" +
    "\052\071\053\052\054\062\055\066\056\063\057\053\061" +
    "\072\073\056\001\002\000\034\004\050\006\067\013\061" +
    "\015\057\030\060\052\071\053\052\054\062\055\066\056" +
    "\063\057\053\061\072\073\056\001\002\000\034\004\050" +
    "\006\067\013\061\015\057\030\060\052\071\053\052\054" +
    "\062\055\066\056\063\057\053\061\072\073\056\001\002" +
    "\000\034\004\050\006\067\013\061\015\057\030\060\052" +
    "\071\053\052\054\062\055\066\056\063\057\053\061\072" +
    "\073\056\001\002\000\100\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\014\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\031\uff9a\033\uff9a\035\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a\067" +
    "\uff9a\073\uff9a\001\002\000\034\004\050\006\067\013\061" +
    "\015\057\030\060\052\071\053\052\054\062\055\066\056" +
    "\063\057\053\061\072\073\056\001\002\000\034\004\050" +
    "\006\067\013\061\015\057\030\060\052\071\053\052\054" +
    "\062\055\066\056\063\057\053\061\072\073\056\001\002" +
    "\000\034\004\050\006\067\013\061\015\057\030\060\052" +
    "\071\053\052\054\062\055\066\056\063\057\053\061\072" +
    "\073\056\001\002\000\034\004\050\006\067\013\061\015" +
    "\057\030\060\052\071\053\052\054\062\055\066\056\063" +
    "\057\053\061\072\073\056\001\002\000\034\004\050\006" +
    "\067\013\061\015\057\030\060\052\071\053\052\054\062" +
    "\055\066\056\063\057\053\061\072\073\056\001\002\000" +
    "\100\005\uffb6\006\076\007\105\010\107\011\104\012\111" +
    "\014\uffb6\016\uffb6\017\113\020\uffb6\021\102\022\077\023" +
    "\uffb6\024\106\025\uffb6\026\114\027\uffb6\031\uffb6\033\uffb6" +
    "\035\112\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\050\uffb6\051\103\067\uffb6\073\uffb6\001\002" +
    "\000\100\005\uffaa\006\076\007\105\010\107\011\104\012" +
    "\111\014\uffaa\016\uffaa\017\113\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa\033" +
    "\uffaa\035\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\050\uffaa\051\103\067\uffaa\073\uffaa\001" +
    "\002\000\100\005\uffa8\006\uffa8\007\uffa8\010\107\011\104" +
    "\012\111\014\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\031\uffa8" +
    "\033\uffa8\035\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\067\uffa8\073\uffa8" +
    "\001\002\000\100\005\uffab\006\076\007\105\010\107\011" +
    "\104\012\111\014\uffab\016\uffab\017\113\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\031" +
    "\uffab\033\uffab\035\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\050\uffab\051\103\067\uffab\073" +
    "\uffab\001\002\000\100\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\031\uffb1\033\uffb1\035\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1\067\uffb1" +
    "\073\uffb1\001\002\000\100\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\111\014\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\031\uffaf\033\uffaf\035\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\067" +
    "\uffaf\073\uffaf\001\002\000\100\005\uffad\006\076\007\105" +
    "\010\107\011\104\012\111\014\uffad\016\uffad\017\113\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\031\uffad\033\uffad\035\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\050\uffad\051\103" +
    "\067\uffad\073\uffad\001\002\000\100\005\uffb3\006\uffb3\007" +
    "\uffb3\010\107\011\104\012\111\014\uffb3\016\uffb3\017\113" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\031\uffb3\033\uffb3\035\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\051" +
    "\103\067\uffb3\073\uffb3\001\002\000\100\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\012\111\014\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\031\uffb0\033\uffb0\035\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\050\uffb0" +
    "\051\uffb0\067\uffb0\073\uffb0\001\002\000\100\005\uff9d\006" +
    "\uff9d\007\uff9d\010\107\011\104\012\111\014\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\031\uff9d\033\uff9d\035\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\050" +
    "\uff9d\051\uff9d\067\uff9d\073\uff9d\001\002\000\100\005\uffae" +
    "\006\076\007\105\010\107\011\104\012\111\014\uffae\016" +
    "\uffae\017\113\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\031\uffae\033\uffae\035\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\050\uffae\051\103\067\uffae\073\uffae\001\002\000\100\005" +
    "\uffb7\006\076\007\105\010\107\011\104\012\111\014\uffb7" +
    "\016\uffb7\017\113\020\uffb7\021\102\022\077\023\uffb7\024" +
    "\106\025\uffb7\026\114\027\uffb7\031\uffb7\033\uffb7\035\112" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\050\uffb7\051\103\067\uffb7\073\uffb7\001\002\000\100" +
    "\005\uffa9\006\076\007\105\010\107\011\104\012\111\014" +
    "\uffa9\016\uffa9\017\113\020\uffa9\021\102\022\077\023\uffa9" +
    "\024\106\025\uffa9\026\114\027\uffa9\031\uffa9\033\uffa9\035" +
    "\112\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\050\uffa9\051\103\067\uffa9\073\uffa9\001\002\000" +
    "\100\005\uffac\006\076\007\105\010\107\011\104\012\111" +
    "\014\uffac\016\uffac\017\113\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac\033\uffac" +
    "\035\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\050\uffac\051\103\067\uffac\073\uffac\001\002" +
    "\000\100\005\uffb2\006\uffb2\007\uffb2\010\107\011\104\012" +
    "\111\014\uffb2\016\uffb2\017\113\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2\033" +
    "\uffb2\035\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\050\uffb2\051\103\067\uffb2\073\uffb2\001" +
    "\002\000\100\005\uffb4\006\uffb4\007\uffb4\010\107\011\104" +
    "\012\111\014\uffb4\016\uffb4\017\113\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\031\uffb4" +
    "\033\uffb4\035\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\050\uffb4\051\103\067\uffb4\073\uffb4" +
    "\001\002\000\036\004\050\006\067\013\061\015\057\020" +
    "\144\030\060\052\071\053\052\054\062\055\066\056\063" +
    "\057\053\061\072\073\056\001\002\000\100\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\011\uff91\012\uff91\014\uff91\016\uff91" +
    "\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\031\uff91\033\uff91\035\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050" +
    "\uff91\051\uff91\067\uff91\073\uff91\001\002\000\100\005\uff8b" +
    "\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\014\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b" +
    "\025\uff8b\026\uff8b\027\uff8b\031\uff8b\033\uff8b\035\uff8b\040" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\050\uff8b\051\uff8b\067\uff8b\073\uff8b\001\002\000\004\073" +
    "\142\001\002\000\100\005\uff94\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\014\uff94\016\uff94\017\uff94\020\uff94\021" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94" +
    "\031\uff94\033\uff94\035\uff94\040\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\045\uff94\046\uff94\050\uff94\051\uff94\067\uff94" +
    "\073\uff94\001\002\000\044\005\101\006\076\007\105\010" +
    "\107\011\104\012\111\014\150\017\113\020\147\021\102" +
    "\022\077\023\115\024\106\025\100\026\114\035\112\051" +
    "\103\001\002\000\034\004\050\006\067\013\061\015\057" +
    "\030\060\052\071\053\052\054\062\055\066\056\063\057" +
    "\053\061\072\073\056\001\002\000\042\005\101\006\076" +
    "\007\105\010\107\011\104\012\111\014\146\017\113\021" +
    "\102\022\077\023\115\024\106\025\100\026\114\035\112" +
    "\051\103\001\002\000\100\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\011\uff8d\012\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\031\uff8d\033\uff8d\035\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\050\uff8d\051\uff8d\067" +
    "\uff8d\073\uff8d\001\002\000\036\004\050\006\067\013\061" +
    "\014\152\015\057\030\060\052\071\053\052\054\062\055" +
    "\066\056\063\057\053\061\072\073\056\001\002\000\100" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\014" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\031\uff93\033\uff93\035" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\050\uff93\051\uff93\067\uff93\073\uff93\001\002\000" +
    "\042\005\101\006\076\007\105\010\107\011\104\012\111" +
    "\014\153\017\113\021\102\022\077\023\115\024\106\025" +
    "\100\026\114\035\112\051\103\001\002\000\100\005\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\014\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\031\uff8e\033\uff8e\035\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\050\uff8e\051\uff8e\067\uff8e\073\uff8e\001\002\000\100\005" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\014\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\031\uff8f\033\uff8f\035\uff8f" +
    "\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\050\uff8f\051\uff8f\067\uff8f\073\uff8f\001\002\000\046" +
    "\005\101\006\076\007\105\010\107\011\104\012\111\014" +
    "\uffc9\016\uffc9\017\113\021\102\022\077\023\115\024\106" +
    "\025\100\026\114\033\160\035\112\051\103\001\002\000" +
    "\006\014\uffca\016\uffca\001\002\000\004\014\157\001\002" +
    "\000\100\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012" +
    "\uff9b\014\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\031\uff9b\033" +
    "\uff9b\035\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\050\uff9b\051\uff9b\067\uff9b\073\uff9b\001" +
    "\002\000\034\004\050\006\067\013\061\015\057\030\060" +
    "\052\071\053\052\054\062\055\066\056\063\057\053\061" +
    "\072\073\056\001\002\000\006\014\uffc8\016\uffc8\001\002" +
    "\000\042\005\101\006\076\007\105\010\107\011\104\012" +
    "\111\017\113\020\166\021\102\022\077\023\115\024\106" +
    "\025\100\026\114\035\112\051\103\001\002\000\004\031" +
    "\165\001\002\000\004\031\uffbd\001\002\000\100\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\031\uffbf\033\uffbf\035\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\050\uffbf\051\uffbf\067\uffbf\073\uffbf\001\002\000\034\004" +
    "\050\006\067\013\061\015\057\030\060\052\071\053\052" +
    "\054\062\055\066\056\063\057\053\061\072\073\056\001" +
    "\002\000\044\005\101\006\076\007\105\010\107\011\104" +
    "\012\111\017\113\021\102\022\077\023\115\024\106\025" +
    "\100\026\114\031\uffbc\033\170\035\112\051\103\001\002" +
    "\000\034\004\050\006\067\013\061\015\057\030\060\052" +
    "\071\053\052\054\062\055\066\056\063\057\053\061\072" +
    "\073\056\001\002\000\004\031\uffbb\001\002\000\042\005" +
    "\101\006\076\007\105\010\107\011\104\012\111\016\173" +
    "\017\113\021\102\022\077\023\115\024\106\025\100\026" +
    "\114\035\112\051\103\001\002\000\102\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\136\014\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\031\uff9f\033\uff9f\035\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\050\uff9f\051\uff9f\067\uff9f\073\uff9f\001\002\000\100\005" +
    "\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\014\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024" +
    "\uff90\025\uff90\026\uff90\027\uff90\031\uff90\033\uff90\035\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046" +
    "\uff90\050\uff90\051\uff90\067\uff90\073\uff90\001\002\000\100" +
    "\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\014" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\024\uff8a\025\uff8a\026\uff8a\027\uff8a\031\uff8a\033\uff8a\035" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a" +
    "\046\uff8a\050\uff8a\051\uff8a\067\uff8a\073\uff8a\001\002\000" +
    "\100\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92" +
    "\014\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\031\uff92\033\uff92" +
    "\035\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\046\uff92\050\uff92\051\uff92\067\uff92\073\uff92\001\002" +
    "\000\100\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012" +
    "\uff8c\014\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\031\uff8c\033" +
    "\uff8c\035\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\050\uff8c\051\uff8c\067\uff8c\073\uff8c\001" +
    "\002\000\036\004\050\006\067\013\061\015\057\016\uffcb" +
    "\030\060\052\071\053\052\054\062\055\066\056\063\057" +
    "\053\061\072\073\056\001\002\000\004\073\202\001\002" +
    "\000\100\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\014\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\031\uff95\033" +
    "\uff95\035\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\050\uff95\051\uff95\067\uff95\073\uff95\001" +
    "\002\000\004\016\204\001\002\000\104\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\035" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\050\uffcc\051\uffcc\067\uffcc\073\uffcc\001\002\000" +
    "\030\031\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\050\uffce\067\uffce\073\uffce\001\002\000" +
    "\100\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5\033\uffb5" +
    "\035\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\050\uffb5\051\uffb5\067\uffb5\073\uffb5\001\002" +
    "\000\030\031\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\050\uffcd\067\uffcd\073\uffcd\001\002" +
    "\000\014\002\uffde\036\uffde\037\uffde\066\uffde\073\uffde\001" +
    "\002\000\034\004\050\006\067\013\061\015\057\030\060" +
    "\052\071\053\052\054\062\055\066\056\063\057\053\061" +
    "\072\073\056\001\002\000\042\005\101\006\076\007\105" +
    "\010\107\011\104\012\111\016\213\017\113\021\102\022" +
    "\077\023\115\024\106\025\100\026\114\035\112\051\103" +
    "\001\002\000\004\063\214\001\002\000\020\040\027\041" +
    "\032\042\022\043\045\044\036\067\026\073\033\001\002" +
    "\000\006\045\217\046\uffc6\001\002\000\004\046\uffc5\001" +
    "\002\000\020\040\027\041\032\042\022\043\045\044\036" +
    "\067\026\073\033\001\002\000\004\046\221\001\002\000" +
    "\030\031\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\050\uffc7\067\uffc7\073\uffc7\001\002\000" +
    "\004\046\uffc4\001\002\000\006\015\200\034\225\001\002" +
    "\000\012\031\uffdc\045\uffdc\046\uffdc\050\uffdc\001\002\000" +
    "\034\004\050\006\067\013\061\015\057\030\060\052\071" +
    "\053\052\054\062\055\066\056\063\057\053\061\072\073" +
    "\056\001\002\000\066\005\101\006\076\007\105\010\107" +
    "\011\104\012\111\017\113\021\102\022\077\023\115\024" +
    "\106\025\100\026\114\031\uffb8\035\112\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051" +
    "\103\067\uffb8\073\uffb8\001\002\000\022\052\232\053\230" +
    "\055\236\056\244\057\243\062\235\064\231\073\241\001" +
    "\002\000\020\016\ufff0\022\ufff0\027\ufff0\031\ufff0\033\ufff0" +
    "\034\ufff0\073\ufff0\001\002\000\004\021\255\001\002\000" +
    "\020\016\ufff1\022\ufff1\027\ufff1\031\ufff1\033\ufff1\034\ufff1" +
    "\073\ufff1\001\002\000\020\016\ufff2\022\ufff2\027\ufff2\031" +
    "\ufff2\033\ufff2\034\ufff2\073\ufff2\001\002\000\020\016\uffeb" +
    "\022\uffeb\027\uffeb\031\uffeb\033\uffeb\034\uffeb\073\uffeb\001" +
    "\002\000\004\021\250\001\002\000\020\016\uffef\022\uffef" +
    "\027\uffef\031\uffef\033\uffef\034\uffef\073\uffef\001\002\000" +
    "\020\016\uffec\022\uffec\027\uffec\031\uffec\033\uffec\034\uffec" +
    "\073\uffec\001\002\000\004\034\245\001\002\000\020\016" +
    "\ufff4\022\ufff4\027\ufff4\031\ufff4\033\ufff4\034\ufff4\073\ufff4" +
    "\001\002\000\020\016\ufff3\022\ufff3\027\ufff3\031\ufff3\033" +
    "\ufff3\034\ufff3\073\ufff3\001\002\000\020\016\uffed\022\uffed" +
    "\027\uffed\031\uffed\033\uffed\034\uffed\073\uffed\001\002\000" +
    "\020\016\uffee\022\uffee\027\uffee\031\uffee\033\uffee\034\uffee" +
    "\073\uffee\001\002\000\034\004\050\006\067\013\061\015" +
    "\057\030\060\052\071\053\052\054\062\055\066\056\063" +
    "\057\053\061\072\073\056\001\002\000\042\005\101\006" +
    "\076\007\105\010\107\011\104\012\111\017\113\021\102" +
    "\022\077\023\115\024\106\025\100\026\114\027\247\035" +
    "\112\051\103\001\002\000\016\002\uffda\036\uffda\037\uffda" +
    "\065\uffda\066\uffda\073\uffda\001\002\000\024\052\232\053" +
    "\230\055\236\056\244\057\243\060\251\062\235\064\231" +
    "\073\241\001\002\000\006\022\uffe8\033\uffe8\001\002\000" +
    "\004\022\254\001\002\000\006\022\uffe9\033\uffe9\001\002" +
    "\000\020\016\uffea\022\uffea\027\uffea\031\uffea\033\uffea\034" +
    "\uffea\073\uffea\001\002\000\024\052\232\053\230\055\236" +
    "\056\244\057\243\060\251\062\235\064\231\073\241\001" +
    "\002\000\004\033\257\001\002\000\024\052\232\053\230" +
    "\055\236\056\244\057\243\060\251\062\235\064\231\073" +
    "\241\001\002\000\004\022\261\001\002\000\020\016\uffe7" +
    "\022\uffe7\027\uffe7\031\uffe7\033\uffe7\034\uffe7\073\uffe7\001" +
    "\002\000\030\031\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\050\uffb9\067\uffb9\073\uffb9\001" +
    "\002\000\042\005\101\006\076\007\105\010\107\011\104" +
    "\012\111\017\113\021\102\022\077\023\115\024\106\025" +
    "\100\026\114\027\264\035\112\051\103\001\002\000\030" +
    "\031\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\050\uffba\067\uffba\073\uffba\001\002\000\020" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\067\uffdb\073" +
    "\uffdb\001\002\000\034\004\050\006\067\013\061\015\057" +
    "\030\060\052\071\053\052\054\062\055\066\056\063\057" +
    "\053\061\072\073\056\001\002\000\042\005\101\006\076" +
    "\007\105\010\107\011\104\012\111\016\270\017\113\021" +
    "\102\022\077\023\115\024\106\025\100\026\114\035\112" +
    "\051\103\001\002\000\004\047\271\001\002\000\020\040" +
    "\027\041\032\042\022\043\045\044\036\067\026\073\033" +
    "\001\002\000\004\050\273\001\002\000\030\031\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\050\uffc3\067\uffc3\073\uffc3\001\002\000\004\073\275\001" +
    "\002\000\004\051\276\001\002\000\006\013\061\030\060" +
    "\001\002\000\004\016\uffc0\001\002\000\004\016\302\001" +
    "\002\000\004\016\uffc1\001\002\000\004\047\303\001\002" +
    "\000\020\040\027\041\032\042\022\043\045\044\036\067" +
    "\026\073\033\001\002\000\004\050\305\001\002\000\030" +
    "\031\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\050\uffc2\067\uffc2\073\uffc2\001\002\000\012" +
    "\031\uffd8\045\uffd8\046\uffd8\050\uffd8\001\002\000\004\027" +
    "\310\001\002\000\030\031\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf\067\uffcf\073" +
    "\uffcf\001\002\000\004\002\001\001\002\000\004\030\313" +
    "\001\002\000\006\031\ufff8\073\315\001\002\000\004\031" +
    "\323\001\002\000\004\020\317\001\002\000\004\031\ufff7" +
    "\001\002\000\022\052\232\053\230\055\236\056\244\057" +
    "\243\062\235\064\231\073\241\001\002\000\006\031\ufff6" +
    "\033\321\001\002\000\004\073\315\001\002\000\004\031" +
    "\ufff5\001\002\000\004\027\324\001\002\000\016\002\ufff9" +
    "\036\ufff9\037\ufff9\065\ufff9\066\ufff9\073\ufff9\001\002\000" +
    "\004\015\326\001\002\000\006\016\uffe4\073\330\001\002" +
    "\000\004\016\336\001\002\000\004\020\332\001\002\000" +
    "\004\016\uffe3\001\002\000\022\052\232\053\230\055\236" +
    "\056\244\057\243\062\235\064\231\073\241\001\002\000" +
    "\006\016\uffe2\033\334\001\002\000\004\073\330\001\002" +
    "\000\004\016\uffe1\001\002\000\004\030\337\001\002\000" +
    "\020\040\027\041\032\042\022\043\045\044\036\067\026" +
    "\073\033\001\002\000\004\031\341\001\002\000\006\020" +
    "\343\027\uffe0\001\002\000\004\027\345\001\002\000\022" +
    "\052\232\053\230\055\236\056\244\057\243\062\235\064" +
    "\231\073\241\001\002\000\004\027\uffdf\001\002\000\016" +
    "\002\uffe5\036\uffe5\037\uffe5\065\uffe5\066\uffe5\073\uffe5\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufffe\065\ufffe" +
    "\001\002\000\004\073\351\001\002\000\004\027\352\001" +
    "\002\000\016\002\uffe6\036\uffe6\037\uffe6\065\uffe6\066\uffe6" +
    "\073\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\020\030\015\032\010\033\006\034\007\036" +
    "\004\037\003\055\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\027\347\042\241\043\232\044\236\045" +
    "\233\001\001\000\016\030\346\033\006\034\007\036\004" +
    "\037\003\055\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\016\001\001\000\016\030" +
    "\310\033\006\034\007\036\004\037\003\055\012\001\001" +
    "\000\002\001\001\000\036\022\024\050\037\053\033\054" +
    "\045\055\027\056\036\057\034\060\040\061\042\062\023" +
    "\063\030\064\022\065\043\066\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\022\024" +
    "\054\305\056\036\057\034\060\040\061\042\062\023\063" +
    "\030\064\022\065\043\066\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\053\264\055\027\001\001\000" +
    "\002\001\001\000\022\006\063\010\053\026\262\066\064" +
    "\076\046\077\054\100\067\101\072\001\001\000\002\001" +
    "\001\000\030\022\024\054\223\056\036\057\034\060\040" +
    "\061\042\062\023\063\030\064\022\065\043\066\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\063\010\053" +
    "\026\050\066\064\076\046\077\054\100\067\101\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\063" +
    "\010\053\026\205\066\064\076\046\077\054\100\067\101" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\102" +
    "\175\103\176\001\001\000\022\006\063\010\053\026\171" +
    "\066\064\076\046\077\054\100\067\101\072\001\001\000" +
    "\026\006\063\010\053\026\161\066\064\074\162\075\163" +
    "\076\046\077\054\100\067\101\072\001\001\000\026\006" +
    "\063\010\053\026\153\066\064\067\155\070\154\076\046" +
    "\077\054\100\067\101\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\102\136\103\137" +
    "\001\001\000\002\001\001\000\022\006\063\010\053\026" +
    "\134\066\064\076\046\077\054\100\067\101\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\063\010\053\026\074\066\064" +
    "\076\046\077\054\100\067\101\072\001\001\000\002\001" +
    "\001\000\022\006\063\010\053\026\133\066\064\076\046" +
    "\077\054\100\067\101\072\001\001\000\022\006\063\010" +
    "\053\026\132\066\064\076\046\077\054\100\067\101\072" +
    "\001\001\000\022\006\063\010\053\026\131\066\064\076" +
    "\046\077\054\100\067\101\072\001\001\000\022\006\063" +
    "\010\053\026\130\066\064\076\046\077\054\100\067\101" +
    "\072\001\001\000\022\006\063\010\053\026\127\066\064" +
    "\076\046\077\054\100\067\101\072\001\001\000\022\006" +
    "\063\010\053\026\126\066\064\076\046\077\054\100\067" +
    "\101\072\001\001\000\022\006\063\010\053\026\125\066" +
    "\064\076\046\077\054\100\067\101\072\001\001\000\022" +
    "\006\063\010\053\026\124\066\064\076\046\077\054\100" +
    "\067\101\072\001\001\000\022\006\063\010\053\026\123" +
    "\066\064\076\046\077\054\100\067\101\072\001\001\000" +
    "\022\006\063\010\053\026\122\066\064\076\046\077\054" +
    "\100\067\101\072\001\001\000\002\001\001\000\022\006" +
    "\063\010\053\026\121\066\064\076\046\077\054\100\067" +
    "\101\072\001\001\000\022\006\063\010\053\026\120\066" +
    "\064\076\046\077\054\100\067\101\072\001\001\000\022" +
    "\006\063\010\053\026\117\066\064\076\046\077\054\100" +
    "\067\101\072\001\001\000\022\006\063\010\053\026\116" +
    "\066\064\076\046\077\054\100\067\101\072\001\001\000" +
    "\022\006\063\010\053\026\115\066\064\076\046\077\054" +
    "\100\067\101\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\063\010\053\026\142" +
    "\066\064\076\046\077\054\100\067\101\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\063\010\053\026" +
    "\144\066\064\076\046\077\054\100\067\101\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\063\010" +
    "\053\026\150\066\064\076\046\077\054\100\067\101\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\063\010" +
    "\053\026\153\066\064\070\160\076\046\077\054\100\067" +
    "\101\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\063\010\053\026\166\066\064\076\046\077\054\100" +
    "\067\101\072\001\001\000\002\001\001\000\024\006\063" +
    "\010\053\026\161\066\064\075\170\076\046\077\054\100" +
    "\067\101\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\102\173\103\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\063\010\053\026\153\066\064\067\202\070\154\076" +
    "\046\077\054\100\067\101\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\063\010\053\026\211\066\064\076" +
    "\046\077\054\100\067\101\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\022\024\050\214\053\033\054" +
    "\045\055\027\056\036\057\034\060\040\061\042\062\023" +
    "\063\030\064\022\065\043\066\041\001\001\000\006\071" +
    "\217\072\215\001\001\000\002\001\001\000\036\022\024" +
    "\050\221\053\033\054\045\055\027\056\036\057\034\060" +
    "\040\061\042\062\023\063\030\064\022\065\043\066\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\063" +
    "\010\053\026\225\066\064\076\046\077\054\100\067\101" +
    "\072\001\001\000\002\001\001\000\014\027\237\042\241" +
    "\043\232\044\236\045\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\063\010" +
    "\053\026\245\066\064\076\046\077\054\100\067\101\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\252\042\241\043\232\044\236\045\233\046\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\027\252\042\241\043\232\044\236" +
    "\045\233\046\255\001\001\000\002\001\001\000\016\027" +
    "\252\042\241\043\232\044\236\045\233\046\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\063\010\053\026\266\066\064\076\046\077\054\100" +
    "\067\101\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\022\024\050\271\053\033\054\045\055\027\056" +
    "\036\057\034\060\040\061\042\062\023\063\030\064\022" +
    "\065\043\066\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\276" +
    "\010\300\073\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\022\024" +
    "\050\303\053\033\054\045\055\027\056\036\057\034\060" +
    "\040\061\042\062\023\063\030\064\022\065\043\066\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\313\041\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\027\317\042\241\043\232\044\236\045\233\001\001\000" +
    "\002\001\001\000\004\041\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\047\326\052\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\027\332\042\241\043" +
    "\232\044\236\045\233\001\001\000\002\001\001\000\004" +
    "\052\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\022\024\050\337\053\033\054\045\055\027\056\036" +
    "\057\034\060\040\061\042\062\023\063\030\064\022\065" +
    "\043\066\041\001\001\000\002\001\001\000\004\051\341" +
    "\001\001\000\002\001\001\000\014\027\343\042\241\043" +
    "\232\044\236\045\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public boolean syntaxErrors;

  //Lexer lexer;

  /*public Parser(Lexer lex) {
      super(lex);
      lexer = lex;
  }*/

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;

    System.out.print(message + ": ");
    if (info instanceof Symbol) {
	    Symbol symbol = (Symbol) info;
	    
	    System.out.print("Error in line "+symbol.left+", column "+symbol.right+":  ");

	    switch(symbol.sym) {
		case  2 : System.out.print( "UNEXPECTED  EXCLAMATION"); break;
		case  3 : System.out.print( "UNEXPECTED  AMPERSANDAMPERSAND"); break;
		case  4 : System.out.print( "UNEXPECTED  MINUS"); break;
		case  5 : System.out.print( "UNEXPECTED  PLUS"); break;
		case  6 : System.out.print( "UNEXPECTED  ASTERISK"); break;
		case  7 : System.out.print( "UNEXPECTED  FSLASH"); break;
		case  8 : System.out.print( "UNEXPECTED  CARAT"); break;
		case  9 : System.out.print( "UNEXPECTED  LSQUAREBRACKET"); break;
		case  10 : System.out.print( "UNEXPECTED  RSQUAREBRACKET"); break;
		case  11 : System.out.print( "UNEXPECTED  LBRACKET"); break;
		case  12 : System.out.print( "UNEXPECTED  RBRACKET"); break;
		case  13 : System.out.print( "UNEXPECTED  COLONCOLON"); break;
		case  14 : System.out.print( "UNEXPECTED  COLON"); break;
		case  15 : System.out.print( "UNEXPECTED  LTHAN"); break;
		case  16 : System.out.print( "UNEXPECTED  LTHANEQUALITY"); break;
		case  17 : System.out.print( "UNEXPECTED  EXCLAMATIONEQUALITY"); break;
		case  18 : System.out.print( "UNEXPECTED  SEMICOLON"); break;
		case  19 : System.out.print( "UNEXPECTED  LBRACE"); break;
		case  20 : System.out.print( "UNEXPECTED  RBRACE"); break;
		case  21 : System.out.print( "UNEXPECTED  DOT"); break;
		case  22 : System.out.print( "UNEXPECTED  COMMA"); break;
		case  23 : System.out.print( "UNEXPECTED  LSQUAREBRACKETPIPE"); break;
		case  24 : System.out.print( "UNEXPECTED  PIPERSQUAREBRACKET"); break;
		case  25 : System.out.print( "UNEXPECTED  EQUALS"); break;
		case  26 : System.out.print( "UNEXPECTED  EQUALSEQUALS"); break;
		case  27 : System.out.print( "UNEXPECTED  TDEF"); break;
		case  28 : System.out.print( "UNEXPECTED  FDEF"); break;
		case  29 : System.out.print( "UNEXPECTED  WHILE"); break;
		case  30 : System.out.print( "UNEXPECTED  RETURN"); break;
		case  31 : System.out.print( "UNEXPECTED  READ"); break;
		case  32 : System.out.print( "UNEXPECTED  PRINT"); break;
		case  33 : System.out.print( "UNEXPECTED  IF"); break;
		case  34 : System.out.print( "UNEXPECTED  ELSE"); break;
		case  35 : System.out.print( "UNEXPECTED  FOREACH"); break;
		case  36 : System.out.print( "UNEXPECTED  IDENTIFIER"); break;
		case  37 : System.out.print( "UNEXPECTED  DO"); break;
		case  38 : System.out.print( "UNEXPECTED  PIPEPIPE"); break;
		case  39 : System.out.print( "UNEXPECTED  IN"); break;
		case  40 : System.out.print( "UNEXPECTED  STRING_LITERAL"); break;
		case  41 : System.out.print( "UNEXPECTED  CHAR_LITERAL"); break;
		case  42 : System.out.print( "UNEXPECTED  INTEGER_LITERAL"); break;
		case  43 : System.out.print( "UNEXPECTED  FLOAT_LITERAL"); break;
         }
         System.out.println(".");
	    
    }
  }

  /*public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new java.io.FileInputStream(args[0]))).parse();
  }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= listdeclaration main listdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listdeclaration ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listdeclaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listdeclaration ::= declaration listdeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listdeclaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= functionDef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= variableDef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= dataTypeDef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= aliasDef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dataTypeDef ::= TDEF IDENTIFIER LBRACE dataTypeDeclarationList RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataTypeDef",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dataTypeDeclarationList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataTypeDeclarationList",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dataTypeDeclarationList ::= dataTypeDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataTypeDeclarationList",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dataTypeDeclaration ::= IDENTIFIER COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataTypeDeclaration",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dataTypeDeclaration ::= IDENTIFIER COLON type COMMA dataTypeDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataTypeDeclaration",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= primitiveDataType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= aggregateDataType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // primitiveDataType ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiveDataType",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // primitiveDataType ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiveDataType",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // primitiveDataType ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiveDataType",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // primitiveDataType ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiveDataType",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // primitiveDataType ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitiveDataType",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aggregateDataType ::= sequenceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregateDataType",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aggregateDataType ::= dictType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregateDataType",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sequenceType ::= SEQ LTHAN typeseqdict MTHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenceType",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typeseqdict ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeseqdict",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typeseqdict ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeseqdict",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dictType ::= DICT LTHAN typeseqdict COMMA typeseqdict MTHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictType",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aliasDef ::= ALIAS type IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aliasDef",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // functionDef ::= FDEF IDENTIFIER LBRACKET formal_parameter_list RBRACKET LBRACE body RBRACE returnType SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDef",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formal_parameter_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formal_parameter_list ::= functionParamsList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functionParamsList ::= IDENTIFIER COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionParamsList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // functionParamsList ::= IDENTIFIER COLON type COMMA functionParamsList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionParamsList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // returnType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // returnType ::= COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnType",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // main ::= MAIN LBRACE body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // body ::= statementDecs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // body ::= localVarDecs statementDecs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // localVarDecs ::= variableDef localVarDecs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("localVarDecs",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variableDef ::= IDENTIFIER COLON type EQUALITY expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variableDef",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statementDecs ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementDecs",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statementDecs ::= statement statementDecs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementDecs",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= readStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= printStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= functionCallStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= ifStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= whileLoopStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= forAllLoopStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= returnStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // readStatement ::= READ IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readStatement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // printStatement ::= PRINT expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStatement",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // functionCallStatement ::= functionCallExpr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionCallStatement",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // functionCallExpr ::= IDENTIFIER LBRACKET paramsListOptions RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionCallExpr",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // paramsListOptions ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsListOptions",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // paramsListOptions ::= paramsList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsListOptions",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // paramsList ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsList",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramsList ::= expr COMMA paramsList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsList",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ifStatement ::= IF LBRACKET expr RBRACKET THEN body optionalElse FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // optionalElse ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionalElse",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // optionalElse ::= elseStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionalElse",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elseStatement ::= ELSE body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseStatement",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // whileLoopStatement ::= WHILE LBRACKET expr RBRACKET DO body OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileLoopStatement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // forAllLoopStatement ::= FORALL LBRACKET IDENTIFIER IN iterable RBRACKET DO body OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forAllLoopStatement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // iterable ::= dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iterable ::= seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterable",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dict ::= LBRACE dictListOptions RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dictListOptions ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictListOptions",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dictListOptions ::= dictList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictListOptions",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dictList ::= expr COLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictList",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dictList ::= expr COLON expr COMMA dictList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictList",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // returnStatement ::= RETURN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // returnStatement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returnStatement",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment ::= IDENTIFIER EQUALITY expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr AMPERSANDAMPERSAND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr PIPEPIPE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= EXCLAMATION expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr CARAT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr FSLASH expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr ASTERISK expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr LTHAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr LTHANEQUALITY expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr MTHAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr EQUALITYEQUALITY expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr EXCLAMATIONEQUALITY expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr IMPLICATION expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= expr COLONCOLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= lenExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= expr IN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= other 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // seq ::= LSQUAREBRACKET paramsListOptions RSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lenExpr ::= LEN LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lenExpr",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // other ::= functionCallExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // other ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // other ::= valueOfIndex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // other ::= substrValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // other ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // other ::= functionCallExpr DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("other",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // index ::= LSQUAREBRACKET expr RSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valueOfIndex ::= IDENTIFIER index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valueOfIndex",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valueOfIndex ::= functionCallExpr index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valueOfIndex",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valueOfIndex ::= LBRACKET expr RBRACKET index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valueOfIndex",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // substr ::= LSQUAREBRACKET expr COLON expr RSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // substr ::= LSQUAREBRACKET expr COLON RSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // substr ::= LSQUAREBRACKET COLON expr RSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substr",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // substrValue ::= IDENTIFIER substr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substrValue",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // substrValue ::= functionCallExpr substr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substrValue",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // substrValue ::= LBRACKET expr RBRACKET substr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("substrValue",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
