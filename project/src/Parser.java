
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\023\004\000\002\002\004\000\002\023" +
    "\002\000\002\023\004\000\002\005\006\000\002\007\007" +
    "\000\002\007\005\000\002\013\005\000\002\013\003\000" +
    "\002\014\004\000\002\015\013\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\021\005\000\002\022" +
    "\004\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\015\000\002\022\010\000\002\022\013\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\003\000\002\022\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\004\000\002\026\005\000\002\026\003\000\002" +
    "\024\010\000\002\025\006\000\002\002\005\000\002\003" +
    "\002\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\010\005\000\002\011\002\000\002\011\003\000" +
    "\002\012\007\000\002\012\005\000\002\016\002\000\002" +
    "\016\003\000\002\017\005\000\002\017\003\000\002\006" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\052\002\uffff\003\035\004\014\013\027\015" +
    "\024\027\010\030\025\036\012\037\005\040\015\041\021" +
    "\042\006\043\034\044\023\047\031\071\043\073\022\074" +
    "\040\076\030\077\037\001\002\000\054\002\uffe8\003\uffe8" +
    "\004\uffe8\013\uffe8\015\uffe8\027\uffe8\030\uffe8\031\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\047\uffe8\071\uffe8\073\uffe8\074\uffe8\076\uffe8\077\uffe8\001" +
    "\002\000\004\073\217\001\002\000\024\004\014\013\027" +
    "\015\024\030\025\071\043\073\047\074\040\076\030\077" +
    "\037\001\002\000\054\002\uffff\003\035\004\014\013\027" +
    "\015\024\027\010\030\025\031\uffff\036\012\037\005\040" +
    "\015\041\021\042\006\043\034\044\023\047\031\071\043" +
    "\073\022\074\040\076\030\077\037\001\002\000\054\002" +
    "\uffe7\003\uffe7\004\uffe7\013\uffe7\015\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\047\uffe7\071\uffe7\073\uffe7\074\uffe7\076\uffe7" +
    "\077\uffe7\001\002\000\004\027\212\001\002\000\004\073" +
    "\202\001\002\000\042\005\052\006\051\007\057\010\061" +
    "\011\056\012\063\013\053\017\065\021\054\023\067\024" +
    "\060\026\066\027\201\032\062\035\064\052\055\001\002" +
    "\000\024\004\014\013\027\015\024\030\025\071\043\073" +
    "\047\074\040\076\030\077\037\001\002\000\024\004\014" +
    "\013\027\015\024\030\025\071\043\073\047\074\040\076" +
    "\030\077\037\001\002\000\060\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5\026\ufff5\027\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\050\ufff5\052" +
    "\ufff5\001\002\000\056\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\035\uffcf\050\uffcf\052\uffcf\001\002\000" +
    "\056\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023" +
    "\uffe5\024\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\050\uffe5\052\uffe5\001\002\000\024\004\014\013" +
    "\027\015\024\030\025\071\043\073\047\074\040\076\030" +
    "\077\037\001\002\000\050\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\015\114\017\ufff6\021\ufff6" +
    "\023\ufff6\024\ufff6\026\ufff6\027\ufff6\032\ufff6\034\ufff6\035" +
    "\ufff6\052\ufff6\073\170\001\002\000\004\015\156\001\002" +
    "\000\024\004\014\013\027\015\024\030\025\071\043\073" +
    "\047\074\040\076\030\077\037\001\002\000\026\004\014" +
    "\013\027\015\024\030\025\031\uffc6\071\043\073\047\074" +
    "\040\076\030\077\037\001\002\000\004\002\143\001\002" +
    "\000\026\004\014\013\027\014\uffcb\015\024\030\025\071" +
    "\043\073\047\074\040\076\030\077\037\001\002\000\056" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb" +
    "\024\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\035" +
    "\uffdb\050\uffdb\052\uffdb\001\002\000\004\015\131\001\002" +
    "\000\006\027\ufff9\034\127\001\002\000\004\027\126\001" +
    "\002\000\026\004\014\013\027\015\024\027\uffcb\030\025" +
    "\071\043\073\047\074\040\076\030\077\037\001\002\000" +
    "\054\002\uffff\003\035\004\014\013\027\015\024\027\010" +
    "\030\025\031\uffff\036\012\037\005\040\015\041\021\042" +
    "\006\043\034\044\023\047\031\071\043\073\022\074\040" +
    "\076\030\077\037\001\002\000\044\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\017\uffe6\021\uffe6" +
    "\023\uffe6\024\uffe6\026\uffe6\027\uffe6\032\uffe6\034\045\035" +
    "\uffe6\052\uffe6\001\002\000\056\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\035\uffdc\050\uffdc\052\uffdc\001" +
    "\002\000\056\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\035\uffdd\050\uffdd\052\uffdd\001\002\000\004\027" +
    "\044\001\002\000\056\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\023\uffe4\024\uffe4\026\uffe4\027\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\035\uffe4\050\uffe4\052\uffe4\001\002\000" +
    "\056\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023" +
    "\uffde\024\uffde\026\uffde\027\uffde\031\uffde\032\uffde\033\uffde" +
    "\035\uffde\050\uffde\052\uffde\001\002\000\054\002\uffe9\003" +
    "\uffe9\004\uffe9\013\uffe9\015\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\047\uffe9\071\uffe9\073\uffe9\074\uffe9\076\uffe9\077\uffe9" +
    "\001\002\000\024\004\014\013\027\015\024\030\025\071" +
    "\043\073\047\074\040\076\030\077\037\001\002\000\056" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\023\uffe6" +
    "\024\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6\033\uffe6\035" +
    "\uffe6\050\uffe6\052\uffe6\001\002\000\060\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\114\016\ufff6\017\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6" +
    "\026\ufff6\027\ufff6\031\ufff6\032\ufff6\033\ufff6\035\ufff6\050" +
    "\ufff6\052\ufff6\001\002\000\042\005\052\006\051\007\057" +
    "\010\061\011\056\012\063\013\053\017\065\021\054\023" +
    "\067\024\060\026\066\027\ufff3\032\062\035\064\052\055" +
    "\001\002\000\024\004\014\013\027\015\024\030\025\071" +
    "\043\073\047\074\040\076\030\077\037\001\002\000\024" +
    "\004\014\013\027\015\024\030\025\071\043\073\047\074" +
    "\040\076\030\077\037\001\002\000\024\004\014\013\027" +
    "\015\024\030\025\071\043\073\047\074\040\076\030\077" +
    "\037\001\002\000\024\004\014\013\027\015\024\030\025" +
    "\071\043\073\047\074\040\076\030\077\037\001\002\000" +
    "\024\004\014\013\027\015\024\030\025\071\043\073\047" +
    "\074\040\076\030\077\037\001\002\000\024\004\014\013" +
    "\027\015\024\030\025\071\043\073\047\074\040\076\030" +
    "\077\037\001\002\000\024\004\014\013\027\015\024\030" +
    "\025\071\043\073\047\074\040\076\030\077\037\001\002" +
    "\000\024\004\014\013\027\015\024\030\025\071\043\073" +
    "\047\074\040\076\030\077\037\001\002\000\024\004\014" +
    "\013\027\015\024\030\025\071\043\073\047\074\040\076" +
    "\030\077\037\001\002\000\004\073\075\001\002\000\024" +
    "\004\014\013\027\015\024\030\025\071\043\073\047\074" +
    "\040\076\030\077\037\001\002\000\024\004\014\013\027" +
    "\015\024\030\025\071\043\073\047\074\040\076\030\077" +
    "\037\001\002\000\024\004\014\013\027\015\024\030\025" +
    "\071\043\073\047\074\040\076\030\077\037\001\002\000" +
    "\024\004\014\013\027\015\024\030\025\071\043\073\047" +
    "\074\040\076\030\077\037\001\002\000\024\004\014\013" +
    "\027\015\024\030\025\071\043\073\047\074\040\076\030" +
    "\077\037\001\002\000\056\005\052\006\051\007\057\010" +
    "\061\011\056\012\063\013\uffd9\014\uffd9\016\uffd9\017\065" +
    "\020\uffd9\021\054\023\uffd9\024\060\026\066\027\uffd9\031" +
    "\uffd9\032\062\033\uffd9\035\064\050\uffd9\052\055\001\002" +
    "\000\056\005\uffd4\006\051\007\057\010\061\011\056\012" +
    "\063\013\uffd4\014\uffd4\016\uffd4\017\065\020\uffd4\021\uffd4" +
    "\023\uffd4\024\uffd4\026\uffd4\027\uffd4\031\uffd4\032\062\033" +
    "\uffd4\035\uffd4\050\uffd4\052\uffd4\001\002\000\056\005\uffd3" +
    "\006\uffd3\007\uffd3\010\061\011\056\012\063\013\uffd3\014" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\027\uffd3\031\uffd3\032\062\033\uffd3\035\uffd3\050" +
    "\uffd3\052\uffd3\001\002\000\056\005\uffd5\006\051\007\057" +
    "\010\061\011\056\012\063\013\uffd5\014\uffd5\016\uffd5\017" +
    "\065\020\uffd5\021\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5" +
    "\031\uffd5\032\062\033\uffd5\035\uffd5\050\uffd5\052\uffd5\001" +
    "\002\000\056\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\031\uffdf\032\062" +
    "\033\uffdf\035\uffdf\050\uffdf\052\uffdf\001\002\000\060\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\023\ufff4\024" +
    "\ufff4\026\ufff4\027\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\050\ufff4\052\ufff4\001\002\000\056\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\063\013\uffe1\014\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\026" +
    "\uffe1\027\uffe1\031\uffe1\032\062\033\uffe1\035\uffe1\050\uffe1" +
    "\052\uffe1\001\002\000\056\005\uffd6\006\051\007\057\010" +
    "\061\011\056\012\063\013\uffd6\014\uffd6\016\uffd6\017\065" +
    "\020\uffd6\021\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\031" +
    "\uffd6\032\062\033\uffd6\035\uffd6\050\uffd6\052\uffd6\001\002" +
    "\000\056\005\uffe3\006\uffe3\007\uffe3\010\061\011\056\012" +
    "\063\013\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\023\uffe3\024\uffe3\026\uffe3\027\uffe3\031\uffe3\032\062\033" +
    "\uffe3\035\uffe3\050\uffe3\052\uffe3\001\002\000\056\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\063\013\uffe0\014" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0" +
    "\026\uffe0\027\uffe0\031\uffe0\032\062\033\uffe0\035\uffe0\050" +
    "\uffe0\052\uffe0\001\002\000\056\005\uffda\006\051\007\057" +
    "\010\061\011\056\012\063\013\uffda\014\uffda\016\uffda\017" +
    "\065\020\uffda\021\uffda\023\uffda\024\uffda\026\uffda\027\uffda" +
    "\031\uffda\032\062\033\uffda\035\uffda\050\uffda\052\uffda\001" +
    "\002\000\056\005\uffd7\006\051\007\057\010\061\011\056" +
    "\012\063\013\uffd7\014\uffd7\016\uffd7\017\065\020\uffd7\021" +
    "\uffd7\023\uffd7\024\uffd7\026\uffd7\027\uffd7\031\uffd7\032\062" +
    "\033\uffd7\035\uffd7\050\uffd7\052\uffd7\001\002\000\044\005" +
    "\052\006\051\007\057\010\061\011\056\012\063\013\053" +
    "\014\106\017\065\020\105\021\054\023\067\024\060\026" +
    "\066\032\062\035\064\052\055\001\002\000\024\004\014" +
    "\013\027\015\024\030\025\071\043\073\047\074\040\076" +
    "\030\077\037\001\002\000\060\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\050\uffcd\052" +
    "\uffcd\001\002\000\042\005\052\006\051\007\057\010\061" +
    "\011\056\012\063\013\053\014\110\017\065\021\054\023" +
    "\067\024\060\026\066\032\062\035\064\052\055\001\002" +
    "\000\056\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\023\uffce\024\uffce\026\uffce\027\uffce\031\uffce\032\uffce\033" +
    "\uffce\035\uffce\050\uffce\052\uffce\001\002\000\056\005\uffd8" +
    "\006\051\007\057\010\061\011\056\012\063\013\uffd8\014" +
    "\uffd8\016\uffd8\017\065\020\uffd8\021\054\023\uffd8\024\060" +
    "\026\066\027\uffd8\031\uffd8\032\062\033\uffd8\035\064\050" +
    "\uffd8\052\055\001\002\000\056\005\uffe2\006\uffe2\007\uffe2" +
    "\010\061\011\056\012\063\013\uffe2\014\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2" +
    "\031\uffe2\032\062\033\uffe2\035\uffe2\050\uffe2\052\uffe2\001" +
    "\002\000\056\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\035\uffd1\050\uffd1\052\uffd1\001\002\000\026\004" +
    "\014\013\027\015\024\016\uffcb\030\025\071\043\073\047" +
    "\074\040\076\030\077\037\001\002\000\004\016\122\001" +
    "\002\000\010\014\uffca\016\uffca\027\uffca\001\002\000\050" +
    "\005\052\006\051\007\057\010\061\011\056\012\063\013" +
    "\053\014\uffc8\016\uffc8\017\065\021\054\023\067\024\060" +
    "\026\066\027\uffc8\032\062\033\120\035\064\052\055\001" +
    "\002\000\024\004\014\013\027\015\024\030\025\071\043" +
    "\073\047\074\040\076\030\077\037\001\002\000\010\014" +
    "\uffc9\016\uffc9\027\uffc9\001\002\000\056\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe\026\uffbe" +
    "\027\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\050\uffbe\052" +
    "\uffbe\001\002\000\006\002\ufffe\031\ufffe\001\002\000\004" +
    "\027\125\001\002\000\054\002\ufff0\003\ufff0\004\ufff0\013" +
    "\ufff0\015\ufff0\027\ufff0\030\ufff0\031\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\047\ufff0\071" +
    "\ufff0\073\ufff0\074\ufff0\076\ufff0\077\ufff0\001\002\000\054" +
    "\002\uffea\003\uffea\004\uffea\013\uffea\015\uffea\027\uffea\030" +
    "\uffea\031\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\047\uffea\071\uffea\073\uffea\074\uffea\076" +
    "\uffea\077\uffea\001\002\000\024\004\014\013\027\015\024" +
    "\030\025\071\043\073\047\074\040\076\030\077\037\001" +
    "\002\000\042\005\052\006\051\007\057\010\061\011\056" +
    "\012\063\013\053\017\065\021\054\023\067\024\060\026" +
    "\066\027\ufffa\032\062\035\064\052\055\001\002\000\024" +
    "\004\014\013\027\015\024\030\025\071\043\073\047\074" +
    "\040\076\030\077\037\001\002\000\042\005\052\006\051" +
    "\007\057\010\061\011\056\012\063\013\053\017\065\020" +
    "\133\021\054\023\067\024\060\026\066\032\062\035\064" +
    "\052\055\001\002\000\004\073\134\001\002\000\004\016" +
    "\135\001\002\000\004\030\136\001\002\000\052\003\035" +
    "\004\014\013\027\015\024\027\010\030\025\031\uffff\036" +
    "\012\037\005\040\015\041\021\042\006\043\034\044\023" +
    "\047\031\071\043\073\022\074\040\076\030\077\037\001" +
    "\002\000\004\031\140\001\002\000\054\002\uffec\003\uffec" +
    "\004\uffec\013\uffec\015\uffec\027\uffec\030\uffec\031\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\047\uffec\071\uffec\073\uffec\074\uffec\076\uffec\077\uffec\001" +
    "\002\000\004\014\142\001\002\000\056\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc" +
    "\027\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\050\uffcc\052" +
    "\uffcc\001\002\000\004\002\000\001\002\000\004\031\uffc5" +
    "\001\002\000\004\031\153\001\002\000\042\005\052\006" +
    "\051\007\057\010\061\011\056\012\063\013\053\017\065" +
    "\020\147\021\054\023\067\024\060\026\066\032\062\035" +
    "\064\052\055\001\002\000\024\004\014\013\027\015\024" +
    "\030\025\071\043\073\047\074\040\076\030\077\037\001" +
    "\002\000\044\005\052\006\051\007\057\010\061\011\056" +
    "\012\063\013\053\017\065\021\054\023\067\024\060\026" +
    "\066\031\uffc3\032\062\033\151\035\064\052\055\001\002" +
    "\000\024\004\014\013\027\015\024\030\025\071\043\073" +
    "\047\074\040\076\030\077\037\001\002\000\004\031\uffc4" +
    "\001\002\000\056\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\035\uffc7\050\uffc7\052\uffc7\001\002\000\042" +
    "\005\052\006\051\007\057\010\061\011\056\012\063\013" +
    "\053\016\155\017\065\021\054\023\067\024\060\026\066" +
    "\032\062\035\064\052\055\001\002\000\056\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\026" +
    "\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\050\uffd0" +
    "\052\uffd0\001\002\000\024\004\014\013\027\015\024\030" +
    "\025\071\043\073\047\074\040\076\030\077\037\001\002" +
    "\000\042\005\052\006\051\007\057\010\061\011\056\012" +
    "\063\013\053\016\160\017\065\021\054\023\067\024\060" +
    "\026\066\032\062\035\064\052\055\001\002\000\004\030" +
    "\161\001\002\000\052\003\035\004\014\013\027\015\024" +
    "\027\010\030\025\031\uffff\036\012\037\005\040\015\041" +
    "\021\042\006\043\034\044\023\047\031\071\043\073\022" +
    "\074\040\076\030\077\037\001\002\000\004\031\163\001" +
    "\002\000\004\045\164\001\002\000\004\030\165\001\002" +
    "\000\052\003\035\004\014\013\027\015\024\027\010\030" +
    "\025\031\uffff\036\012\037\005\040\015\041\021\042\006" +
    "\043\034\044\023\047\031\071\043\073\022\074\040\076" +
    "\030\077\037\001\002\000\004\031\167\001\002\000\054" +
    "\002\uffee\003\uffee\004\uffee\013\uffee\015\uffee\027\uffee\030" +
    "\uffee\031\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\047\uffee\071\uffee\073\uffee\074\uffee\076" +
    "\uffee\077\uffee\001\002\000\012\016\ufff8\027\ufff8\033\ufff8" +
    "\034\ufff8\001\002\000\042\005\052\006\051\007\057\010" +
    "\061\011\056\012\063\013\053\017\065\021\054\023\067" +
    "\024\060\026\066\027\172\032\062\035\064\052\055\001" +
    "\002\000\054\002\uffef\003\uffef\004\uffef\013\uffef\015\uffef" +
    "\027\uffef\030\uffef\031\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\047\uffef\071\uffef\073\uffef" +
    "\074\uffef\076\uffef\077\uffef\001\002\000\042\005\052\006" +
    "\051\007\057\010\061\011\056\012\063\013\053\017\065" +
    "\021\054\023\067\024\060\026\066\032\062\035\064\050" +
    "\174\052\055\001\002\000\004\030\175\001\002\000\052" +
    "\003\035\004\014\013\027\015\024\027\010\030\025\031" +
    "\uffff\036\012\037\005\040\015\041\021\042\006\043\034" +
    "\044\023\047\031\071\043\073\022\074\040\076\030\077" +
    "\037\001\002\000\004\031\177\001\002\000\054\002\uffed" +
    "\003\uffed\004\uffed\013\uffed\015\uffed\027\uffed\030\uffed\031" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\047\uffed\071\uffed\073\uffed\074\uffed\076\uffed\077" +
    "\uffed\001\002\000\056\005\uffd2\006\051\007\057\010\061" +
    "\011\056\012\063\013\uffd2\014\uffd2\016\uffd2\017\065\020" +
    "\uffd2\021\054\023\uffd2\024\060\026\066\027\uffd2\031\uffd2" +
    "\032\062\033\uffd2\035\064\050\uffd2\052\055\001\002\000" +
    "\054\002\uffeb\003\uffeb\004\uffeb\013\uffeb\015\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\047\uffeb\071\uffeb\073\uffeb\074\uffeb" +
    "\076\uffeb\077\uffeb\001\002\000\004\020\203\001\002\000" +
    "\004\073\204\001\002\000\004\020\206\001\002\000\004" +
    "\027\ufffd\001\002\000\024\004\014\013\027\015\024\030" +
    "\025\071\043\073\047\074\040\076\030\077\037\001\002" +
    "\000\044\005\052\006\051\007\057\010\061\011\056\012" +
    "\063\013\053\017\065\021\054\023\067\024\060\026\066" +
    "\027\ufffb\032\062\033\210\035\064\052\055\001\002\000" +
    "\004\073\204\001\002\000\004\027\ufffc\001\002\000\054" +
    "\002\ufff2\003\ufff2\004\ufff2\013\ufff2\015\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\047\ufff2\071\ufff2\073\ufff2\074\ufff2\076" +
    "\ufff2\077\ufff2\001\002\000\006\002\001\031\001\001\002" +
    "\000\042\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\017\uffe6\021\uffe6\023\uffe6\024\uffe6\026\uffe6" +
    "\027\216\032\uffe6\035\uffe6\052\uffe6\001\002\000\040\005" +
    "\052\006\051\007\057\010\061\011\056\012\063\013\053" +
    "\017\065\021\054\023\067\024\060\026\066\032\062\035" +
    "\064\052\055\001\002\000\054\002\ufff1\003\ufff1\004\ufff1" +
    "\013\ufff1\015\ufff1\027\ufff1\030\ufff1\031\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\047\ufff1" +
    "\071\ufff1\073\ufff1\074\ufff1\076\ufff1\077\ufff1\001\002\000" +
    "\004\073\220\001\002\000\004\015\221\001\002\000\006" +
    "\016\uffc2\073\224\001\002\000\004\016\uffc1\001\002\000" +
    "\004\016\230\001\002\000\004\073\170\001\002\000\006" +
    "\016\uffbf\033\226\001\002\000\004\073\224\001\002\000" +
    "\004\016\uffc0\001\002\000\004\030\231\001\002\000\052" +
    "\003\035\004\014\013\027\015\024\027\010\030\025\031" +
    "\uffff\036\012\037\005\040\015\041\021\042\006\043\034" +
    "\044\023\047\031\071\043\073\022\074\040\076\030\077" +
    "\037\001\002\000\004\031\233\001\002\000\054\002\ufff7" +
    "\003\ufff7\004\ufff7\013\ufff7\015\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\047\ufff7\071\ufff7\073\ufff7\074\ufff7\076\ufff7\077" +
    "\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\034\002\041\005\040\010\017\013\032\014" +
    "\031\015\003\020\035\021\010\022\006\023\025\024\016" +
    "\025\015\026\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\041\010\017\020\213\024\016\025\015" +
    "\026\214\001\001\000\034\002\041\005\040\010\017\013" +
    "\032\014\031\015\003\020\035\021\010\022\006\023\212" +
    "\024\016\025\015\026\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\041\010\017\020\045\024\016\025\015\026\177\001" +
    "\001\000\016\002\041\010\017\020\045\024\016\025\015" +
    "\026\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\041\010\017\020\045\024\016" +
    "\025\015\026\170\001\001\000\004\006\112\001\001\000" +
    "\002\001\001\000\016\002\041\010\017\020\045\024\016" +
    "\025\015\026\153\001\001\000\022\002\041\010\017\011" +
    "\144\012\143\020\045\024\016\025\015\026\145\001\001" +
    "\000\002\001\001\000\022\002\041\003\140\004\115\010" +
    "\017\020\045\024\016\025\015\026\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\041\003\123\004\115\010\017\020\045" +
    "\024\016\025\015\026\116\001\001\000\034\002\041\005" +
    "\040\010\017\013\032\014\031\015\003\020\035\021\010" +
    "\022\006\023\122\024\016\025\015\026\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\041\010\017\020\045\024\016\025\015" +
    "\026\047\001\001\000\002\001\001\000\004\006\112\001" +
    "\001\000\002\001\001\000\016\002\041\010\017\020\045" +
    "\024\016\025\015\026\111\001\001\000\016\002\041\010" +
    "\017\020\045\024\016\025\015\026\110\001\001\000\016" +
    "\002\041\010\017\020\045\024\016\025\015\026\103\001" +
    "\001\000\016\002\041\010\017\020\045\024\016\025\015" +
    "\026\102\001\001\000\016\002\041\010\017\020\045\024" +
    "\016\025\015\026\101\001\001\000\016\002\041\010\017" +
    "\020\045\024\016\025\015\026\100\001\001\000\016\002" +
    "\041\010\017\020\045\024\016\025\015\026\077\001\001" +
    "\000\016\002\041\010\017\020\045\024\016\025\015\026" +
    "\076\001\001\000\016\002\041\010\017\020\045\024\016" +
    "\025\015\026\075\001\001\000\002\001\001\000\016\002" +
    "\041\010\017\020\045\024\016\025\015\026\073\001\001" +
    "\000\016\002\041\010\017\020\045\024\016\025\015\026" +
    "\072\001\001\000\016\002\041\010\017\020\045\024\016" +
    "\025\015\026\071\001\001\000\016\002\041\010\017\020" +
    "\045\024\016\025\015\026\070\001\001\000\016\002\041" +
    "\010\017\020\045\024\016\025\015\026\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\041\010\017\020\045\024\016\025\015\026\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\041\003\114\004\115\010\017\020\045\024" +
    "\016\025\015\026\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\041\004\120\010" +
    "\017\020\045\024\016\025\015\026\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\041" +
    "\010\017\020\045\024\016\025\015\026\127\001\001\000" +
    "\002\001\001\000\016\002\041\010\017\020\045\024\016" +
    "\025\015\026\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\041" +
    "\005\040\010\017\013\032\014\031\015\003\020\035\021" +
    "\010\022\006\023\136\024\016\025\015\026\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\041\010\017\020" +
    "\045\024\016\025\015\026\147\001\001\000\002\001\001" +
    "\000\020\002\041\010\017\012\151\020\045\024\016\025" +
    "\015\026\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\041\010" +
    "\017\020\045\024\016\025\015\026\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\041\005\040\010" +
    "\017\013\032\014\031\015\003\020\035\021\010\022\006" +
    "\023\161\024\016\025\015\026\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\041" +
    "\005\040\010\017\013\032\014\031\015\003\020\035\021" +
    "\010\022\006\023\165\024\016\025\015\026\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\041\005\040\010\017\013\032\014" +
    "\031\015\003\020\035\021\010\022\006\023\175\024\016" +
    "\025\015\026\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\041\010\017\020\045\024\016\025\015" +
    "\026\206\001\001\000\002\001\001\000\004\007\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\224\016\222" +
    "\017\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\224\017\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\041\005\040\010\017\013\032\014\031\015\003\020\035" +
    "\021\010\022\006\023\231\024\016\025\015\026\012\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public boolean syntaxErrors;

  //Lexer lexer;

  /*public Parser(Lexer lex) {
      super(lex);
      lexer = lex;
  }*/

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;

    System.out.print(message + ": ");
    if (info instanceof Symbol) {
	    Symbol symbol = (Symbol) info;
	    
	    System.out.print("Error in line "+symbol.left+", column "+symbol.right+":  ");

	    switch(symbol.sym) {
		case  2 : System.out.print( "UNEXPECTED  EXCLAMATION"); break;
		case  3 : System.out.print( "UNEXPECTED  AMPERSANDAMPERSAND"); break;
		case  4 : System.out.print( "UNEXPECTED  MINUS"); break;
		case  5 : System.out.print( "UNEXPECTED  PLUS"); break;
		case  6 : System.out.print( "UNEXPECTED  ASTERISK"); break;
		case  7 : System.out.print( "UNEXPECTED  FSLASH"); break;
		case  8 : System.out.print( "UNEXPECTED  CARAT"); break;
		case  9 : System.out.print( "UNEXPECTED  LSQUAREBRACKET"); break;
		case  10 : System.out.print( "UNEXPECTED  RSQUAREBRACKET"); break;
		case  11 : System.out.print( "UNEXPECTED  LBRACKET"); break;
		case  12 : System.out.print( "UNEXPECTED  RBRACKET"); break;
		case  13 : System.out.print( "UNEXPECTED  COLONCOLON"); break;
		case  14 : System.out.print( "UNEXPECTED  COLON"); break;
		case  15 : System.out.print( "UNEXPECTED  LTHAN"); break;
		case  16 : System.out.print( "UNEXPECTED  LTHANEQUALITY"); break;
		case  17 : System.out.print( "UNEXPECTED  EXCLAMATIONEQUALITY"); break;
		case  18 : System.out.print( "UNEXPECTED  SEMICOLON"); break;
		case  19 : System.out.print( "UNEXPECTED  LBRACE"); break;
		case  20 : System.out.print( "UNEXPECTED  RBRACE"); break;
		case  21 : System.out.print( "UNEXPECTED  DOT"); break;
		case  22 : System.out.print( "UNEXPECTED  COMMA"); break;
		case  23 : System.out.print( "UNEXPECTED  LSQUAREBRACKETPIPE"); break;
		case  24 : System.out.print( "UNEXPECTED  PIPERSQUAREBRACKET"); break;
		case  25 : System.out.print( "UNEXPECTED  EQUALS"); break;
		case  26 : System.out.print( "UNEXPECTED  EQUALSEQUALS"); break;
		case  27 : System.out.print( "UNEXPECTED  TDEF"); break;
		case  28 : System.out.print( "UNEXPECTED  FDEF"); break;
		case  29 : System.out.print( "UNEXPECTED  WHILE"); break;
		case  30 : System.out.print( "UNEXPECTED  RETURN"); break;
		case  31 : System.out.print( "UNEXPECTED  READ"); break;
		case  32 : System.out.print( "UNEXPECTED  PRINT"); break;
		case  33 : System.out.print( "UNEXPECTED  IF"); break;
		case  34 : System.out.print( "UNEXPECTED  ELSE"); break;
		case  35 : System.out.print( "UNEXPECTED  FOREACH"); break;
		case  36 : System.out.print( "UNEXPECTED  IDENTIFIER"); break;
		case  37 : System.out.print( "UNEXPECTED  DO"); break;
		case  38 : System.out.print( "UNEXPECTED  PIPEPIPE"); break;
		case  39 : System.out.print( "UNEXPECTED  IN"); break;
		case  40 : System.out.print( "UNEXPECTED  STRING_LITERAL"); break;
		case  41 : System.out.print( "UNEXPECTED  CHAR_LITERAL"); break;
		case  42 : System.out.print( "UNEXPECTED  INTEGER_LITERAL"); break;
		case  43 : System.out.print( "UNEXPECTED  FLOAT_LITERAL"); break;
         }
         System.out.println(".");
	    
    }
  }

  /*public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new java.io.FileInputStream(args[0]))).parse();
  }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // block ::= statement block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= error block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tdef ::= TDEF IDENTIFIER COLON inhabitedCommaSeparatedIdentifierKeyList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tdef",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inhabitedCommaSeparatedIdentifierKeyList ::= IDENTIFIER COLON expr COMMA inhabitedCommaSeparatedIdentifierKeyList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inhabitedCommaSeparatedIdentifierKeyList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inhabitedCommaSeparatedIdentifierKeyList ::= IDENTIFIER COLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inhabitedCommaSeparatedIdentifierKeyList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDeclaration ::= varSpec EQUALITY expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDeclaration ::= varSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varSpec ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varSpec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funDeclaration ::= FDEF IDENTIFIER IDENTIFIER LBRACKET commaSeparatedVarSpecList RBRACKET LBRACE block RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funDeclaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable ::= sequenceAccess 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable ::= expr DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varAssignment ::= variable EQUALITY expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAssignment",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= varAssignment SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= READ variable SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= PRINT commaSeparatedList SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= RETURN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= IF LBRACKET expr RBRACKET LBRACE block RBRACE ELSE LBRACE block RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= WHILE expr DO LBRACE block RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= FOREACH LBRACKET expr COLON IDENTIFIER RBRACKET LBRACE block RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= varDeclaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= tdef SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= funDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= dict 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr ASTERISK expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr FSLASH expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr CARAT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= STRING_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= CHAR_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= INT_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= FLOAT_CONSTANT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr IN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr PIPEPIPE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr AMPERSANDAMPERSAND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr LTHAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr LTHANEQUALITY expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr EQUALITYEQUALITY expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr EXCLAMATIONEQUALITY expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr COLONCOLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= EXCLAMATION expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= IDENTIFIER seq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= LBRACKET expr RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= sequenceSlice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sequenceSlice ::= expr LSQUAREBRACKET expr COLON expr RSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenceSlice",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sequenceAccess ::= expr LSQUAREBRACKET expr RSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequenceAccess",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list ::= LSQUAREBRACKET commaSeparatedList RSQUAREBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // commaSeparatedList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaSeparatedList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // commaSeparatedList ::= inhabitedCommaSeparatedList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaSeparatedList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inhabitedCommaSeparatedList ::= expr COMMA inhabitedCommaSeparatedList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inhabitedCommaSeparatedList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inhabitedCommaSeparatedList ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inhabitedCommaSeparatedList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dict ::= LBRACE commaSeparatedKeyList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // commaSeparatedKeyList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaSeparatedKeyList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // commaSeparatedKeyList ::= inhabitedCommaSeparatedKeyList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaSeparatedKeyList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inhabitedCommaSeparatedKeyList ::= expr COLON expr COMMA inhabitedCommaSeparatedKeyList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inhabitedCommaSeparatedKeyList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inhabitedCommaSeparatedKeyList ::= expr COLON expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inhabitedCommaSeparatedKeyList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // commaSeparatedVarSpecList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaSeparatedVarSpecList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // commaSeparatedVarSpecList ::= inhabitedCommaSeparatedVarSpecList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaSeparatedVarSpecList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inhabitedCommaSeparatedVarSpecList ::= varSpec COMMA inhabitedCommaSeparatedVarSpecList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inhabitedCommaSeparatedVarSpecList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inhabitedCommaSeparatedVarSpecList ::= varSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inhabitedCommaSeparatedVarSpecList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // seq ::= LBRACKET commaSeparatedList RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
