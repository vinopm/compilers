import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;


/* Preliminaries to use the lexer.  */
//test
//scan with {: return scanner.next_token(); :};


parser code {: 
  public boolean syntaxErrors;



  public void syntax_error(Symbol current_token) { report_error(
    "Syntax error at line " + (current_token.left+1) + ", column "
	+ current_token.right, null );
  }

:}; 


terminal EXCLAMATION, AMPERSANDAMPERSAND, MINUS, PLUS, ASTERISK, FSLASH, CARAT, LSQUAREBRACKET, RSQUAREBRACKET, LBRACKET, RBRACKET, COLONCOLON, COLON, LTHAN, MTHAN, PIPEPIPE, LTHANEQUALITY, IMPLICATION, EXCLAMATIONEQUALITY, SEMICOLON, LBRACE, RBRACE, DOT, COMMA, EQUALITY, EQUALITYEQUALITY, TDEF, FDEF, WHILE, RETURN, READ, PRINT, IF, ELSE, FI, DO, OD, IN, BOOL, INT, RAT, FLOAT, CHAR, TOP, LEN, SEQ, THEN, DICT, MAIN, ALIAS, FORALL, NEGATIVESIGN;

terminal String STRING_CONSTANT, RAT_CONSTANT, IDENTIFIER, CHAR_CONSTANT;
terminal Boolean BOOL_CONSTANT;
terminal Float FLOAT_CONSTANT; 
terminal Integer INT_CONSTANT;

non terminal seq_constant, dict_constant, statement, expr, type, listdeclaration, main, program, declaration, functionDef, dataTypeDef, aliasDef, dataTypeDeclarationList, dataTypeDeclaration, primitiveDataType, aggregateDataType, sequenceType, dictType, typeseqdict, formal_parameter_list, funcBody, returnType, functionParamsList, localVarDecs, statementDecs, variableDef, readStatement, printStatement, functionCallStatement, ifStatement, whileLoopStatement, forAllLoopStatement, returnStatement, assignment, functionCallExpr, paramsListOptions, paramsList, optionalElse, elseStatement, iterable, dictListOptions, dictList, lenExpr, other, valueOfIndex, substrValue, index, substr, typeDef, commaListSeparated;

precedence left PIPEPIPE, AMPERSANDAMPERSAND, IMPLICATION, IDENTIFIER;
precedence left EQUALITYEQUALITY, LTHAN, MTHAN, LTHANEQUALITY, EXCLAMATIONEQUALITY;
precedence left PLUS, MINUS;
precedence left IN, COLONCOLON;
precedence left ASTERISK, FSLASH;
precedence left CARAT;
precedence left EXCLAMATION, NEGATIVESIGN, EQUALITY;
precedence left LBRACKET, RBRACKET, COLON;



program ::= listdeclaration main listdeclaration;

listdeclaration ::= | declaration listdeclaration;

declaration ::= functionDef | variableDef | dataTypeDef | aliasDef | typeDef;

dataTypeDef ::= TDEF IDENTIFIER LBRACE dataTypeDeclarationList RBRACE SEMICOLON;

dataTypeDeclarationList ::= | dataTypeDeclaration;

dataTypeDeclaration ::= IDENTIFIER COLON type | IDENTIFIER COLON type COMMA dataTypeDeclaration;

typeDef ::= IDENTIFIER COLON type EQUALITY commaListSeparated SEMICOLON;

//commaList ::= | commaListSeparated;

commaListSeparated ::= expr COMMA expr | expr COMMA commaListSeparated;


type ::= IDENTIFIER | primitiveDataType | aggregateDataType; 

primitiveDataType ::= BOOL | INT | RAT | FLOAT | CHAR;

aggregateDataType ::= sequenceType | dictType;

sequenceType ::= SEQ LTHAN typeseqdict MTHAN;

typeseqdict ::= type | TOP;

dictType ::= DICT LTHAN typeseqdict COMMA typeseqdict MTHAN;

aliasDef ::= ALIAS type IDENTIFIER SEMICOLON;

functionDef ::= FDEF IDENTIFIER LBRACKET formal_parameter_list RBRACKET LBRACE funcBody RBRACE returnType SEMICOLON;

formal_parameter_list ::= | functionParamsList;

functionParamsList ::= IDENTIFIER COLON type | IDENTIFIER COLON type COMMA functionParamsList;

returnType ::= | COLON type;

//globalVarDef ::= IDENTIFIER COLON type EQUALITY expr SEMICOLON;

main ::= MAIN LBRACE funcBody RBRACE SEMICOLON;

//funcBody ::= localVarDecs | statementDecs | localVarDecs statementDecs;

funcBody ::= localVarDecs | statementDecs | localVarDecs statementDecs; //declaration statementDecs;

//localVarDecs ::= variableDef localVarDecs;

localVarDecs ::= localVarDecs declaration | declaration; // localVarDecs | declaration;

//localVarDecs ::= variableDef | variableDef localVarDecs;

variableDef ::= IDENTIFIER COLON type EQUALITY expr SEMICOLON | IDENTIFIER COLON type SEMICOLON | IDENTIFIER DOT type EQUALITY expr SEMICOLON | IDENTIFIER DOT type;

//expr1 ::= expr | typeDef;

statementDecs ::= statement | statementDecs statement;

statement ::= readStatement | printStatement | functionCallStatement | ifStatement | whileLoopStatement | forAllLoopStatement | returnStatement | assignment;

readStatement ::= READ IDENTIFIER SEMICOLON;

printStatement ::= PRINT expr SEMICOLON;

functionCallStatement ::= functionCallExpr SEMICOLON; 

functionCallExpr ::= IDENTIFIER LBRACKET paramsListOptions RBRACKET;

paramsListOptions ::= | paramsList;

paramsList ::= expr | expr COMMA paramsList;

ifStatement ::= IF LBRACKET expr RBRACKET THEN funcBody optionalElse FI;

optionalElse ::= | elseStatement;

elseStatement ::= ELSE funcBody;

whileLoopStatement ::= WHILE LBRACKET expr RBRACKET DO funcBody OD;

forAllLoopStatement ::= FORALL LBRACKET IDENTIFIER IN iterable RBRACKET DO funcBody OD;

iterable ::= dict_constant | seq_constant | IDENTIFIER;

dict_constant ::= LBRACE dictListOptions RBRACE;

seq_constant ::= LSQUAREBRACKET paramsListOptions RSQUAREBRACKET;

dictListOptions ::= | dictList;

dictList ::= expr COLON expr | expr COLON expr COMMA dictList;

returnStatement ::= RETURN expr SEMICOLON | RETURN SEMICOLON;

//maybe should be updated to allow assigning value to index, and not to allow assigning value to an arry index returned from function

assignment ::= IDENTIFIER EQUALITY expr SEMICOLON | IDENTIFIER LSQUAREBRACKET expr RSQUAREBRACKET EQUALITY expr SEMICOLON; 

expr ::= expr AMPERSANDAMPERSAND expr 
		| expr PIPEPIPE expr
		| EXCLAMATION expr
		| MINUS expr %prec NEGATIVESIGN /*check what this does*/
		| expr PLUS expr
        | expr MINUS expr
        | expr CARAT expr
        | expr FSLASH expr
        | expr ASTERISK expr
        | expr LTHAN expr
        | expr LTHANEQUALITY expr
        | expr MTHAN expr
        | expr EQUALITYEQUALITY expr
        | expr EXCLAMATIONEQUALITY expr
        | expr IMPLICATION expr
        | expr COLONCOLON expr
        | INT_CONSTANT
        | NEGATIVESIGN INT_CONSTANT
        | FLOAT_CONSTANT
        | NEGATIVESIGN FLOAT_CONSTANT
        | BOOL_CONSTANT
        | STRING_CONSTANT
        | CHAR_CONSTANT
        | RAT_CONSTANT
        | NEGATIVESIGN RAT_CONSTANT
        | seq_constant
        | dict_constant
        | LBRACKET expr RBRACKET
        | lenExpr
        | expr IN expr
        | other
        ;



lenExpr ::= LEN LBRACKET expr RBRACKET;

other ::= functionCallExpr | IDENTIFIER | valueOfIndex | substrValue | IDENTIFIER DOT IDENTIFIER | functionCallExpr DOT IDENTIFIER;

index ::= LSQUAREBRACKET expr RSQUAREBRACKET;

valueOfIndex ::= IDENTIFIER index | functionCallExpr index | LBRACKET expr RBRACKET index;

substr ::= LSQUAREBRACKET expr COLON expr RSQUAREBRACKET | LSQUAREBRACKET expr COLON RSQUAREBRACKET | LSQUAREBRACKET COLON expr RSQUAREBRACKET;

substrValue ::= IDENTIFIER substr | functionCallExpr substr | LBRACKET expr RBRACKET substr;
